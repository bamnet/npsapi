// Code generated by go-swagger; DO NOT EDIT.

package newsreleases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/bamnet/npsapi/generated/models"
)

// GetNewsReleasesReader is a Reader for the GetNewsReleases structure.
type GetNewsReleasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNewsReleasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNewsReleasesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNewsReleasesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNewsReleasesOK creates a GetNewsReleasesOK with default headers values
func NewGetNewsReleasesOK() *GetNewsReleasesOK {
	return &GetNewsReleasesOK{}
}

/*GetNewsReleasesOK handles this case with default header values.

successful operation
*/
type GetNewsReleasesOK struct {
	Payload []*models.NewsRelease
}

func (o *GetNewsReleasesOK) Error() string {
	return fmt.Sprintf("[GET /newsreleases][%d] getNewsReleasesOK  %+v", 200, o.Payload)
}

func (o *GetNewsReleasesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNewsReleasesBadRequest creates a GetNewsReleasesBadRequest with default headers values
func NewGetNewsReleasesBadRequest() *GetNewsReleasesBadRequest {
	return &GetNewsReleasesBadRequest{}
}

/*GetNewsReleasesBadRequest handles this case with default header values.

Invalid status value
*/
type GetNewsReleasesBadRequest struct {
}

func (o *GetNewsReleasesBadRequest) Error() string {
	return fmt.Sprintf("[GET /newsreleases][%d] getNewsReleasesBadRequest ", 400)
}

func (o *GetNewsReleasesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

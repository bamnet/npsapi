// Code generated by go-swagger; DO NOT EDIT.

package alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAlertsParams creates a new GetAlertsParams object
// with the default values initialized.
func NewGetAlertsParams() *GetAlertsParams {
	var ()
	return &GetAlertsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAlertsParamsWithTimeout creates a new GetAlertsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAlertsParamsWithTimeout(timeout time.Duration) *GetAlertsParams {
	var ()
	return &GetAlertsParams{

		timeout: timeout,
	}
}

// NewGetAlertsParamsWithContext creates a new GetAlertsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAlertsParamsWithContext(ctx context.Context) *GetAlertsParams {
	var ()
	return &GetAlertsParams{

		Context: ctx,
	}
}

// NewGetAlertsParamsWithHTTPClient creates a new GetAlertsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAlertsParamsWithHTTPClient(client *http.Client) *GetAlertsParams {
	var ()
	return &GetAlertsParams{
		HTTPClient: client,
	}
}

/*GetAlertsParams contains all the parameters to send to the API endpoint
for the get alerts operation typically these are written to a http.Request
*/
type GetAlertsParams struct {

	/*Fields
	  A comma delimited list of resource properties to include in the JSON response in addition to the default properties. The available properties for each resource are listed in the documentation for each resource. Invalid property values will be ignored.

	*/
	Fields []string
	/*Limit
	  Number of results to return per request. Default is 50.

	*/
	Limit *int64
	/*ParkCode
	  A comma delimited list of park codes (each 4-10 characters in length).

	*/
	ParkCode []string
	/*Q
	  Term to search on

	*/
	Q *string
	/*Sort
	  A comma delimited list of resource properties to sort the results by. Each resource identifies which properties are 'sortable'. Ascending order is assumed for each property. If descending order is desired, the unary negative should prefix the property name. The sortable properties are listed in the documentation for each resource. Invalid property values will be ignored.

	*/
	Sort []string
	/*Start
	  Get the next [limit] results starting with this number.

	*/
	Start *int64
	/*StateCode
	  A comma delimited list of 2 character state codes.

	*/
	StateCode []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get alerts params
func (o *GetAlertsParams) WithTimeout(timeout time.Duration) *GetAlertsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get alerts params
func (o *GetAlertsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get alerts params
func (o *GetAlertsParams) WithContext(ctx context.Context) *GetAlertsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get alerts params
func (o *GetAlertsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get alerts params
func (o *GetAlertsParams) WithHTTPClient(client *http.Client) *GetAlertsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get alerts params
func (o *GetAlertsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the get alerts params
func (o *GetAlertsParams) WithFields(fields []string) *GetAlertsParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get alerts params
func (o *GetAlertsParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithLimit adds the limit to the get alerts params
func (o *GetAlertsParams) WithLimit(limit *int64) *GetAlertsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get alerts params
func (o *GetAlertsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithParkCode adds the parkCode to the get alerts params
func (o *GetAlertsParams) WithParkCode(parkCode []string) *GetAlertsParams {
	o.SetParkCode(parkCode)
	return o
}

// SetParkCode adds the parkCode to the get alerts params
func (o *GetAlertsParams) SetParkCode(parkCode []string) {
	o.ParkCode = parkCode
}

// WithQ adds the q to the get alerts params
func (o *GetAlertsParams) WithQ(q *string) *GetAlertsParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get alerts params
func (o *GetAlertsParams) SetQ(q *string) {
	o.Q = q
}

// WithSort adds the sort to the get alerts params
func (o *GetAlertsParams) WithSort(sort []string) *GetAlertsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get alerts params
func (o *GetAlertsParams) SetSort(sort []string) {
	o.Sort = sort
}

// WithStart adds the start to the get alerts params
func (o *GetAlertsParams) WithStart(start *int64) *GetAlertsParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get alerts params
func (o *GetAlertsParams) SetStart(start *int64) {
	o.Start = start
}

// WithStateCode adds the stateCode to the get alerts params
func (o *GetAlertsParams) WithStateCode(stateCode []string) *GetAlertsParams {
	o.SetStateCode(stateCode)
	return o
}

// SetStateCode adds the stateCode to the get alerts params
func (o *GetAlertsParams) SetStateCode(stateCode []string) {
	o.StateCode = stateCode
}

// WriteToRequest writes these params to a swagger request
func (o *GetAlertsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "multi")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	valuesParkCode := o.ParkCode

	joinedParkCode := swag.JoinByFormat(valuesParkCode, "multi")
	// query array param parkCode
	if err := r.SetQueryParam("parkCode", joinedParkCode...); err != nil {
		return err
	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "multi")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	if o.Start != nil {

		// query param start
		var qrStart int64
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt64(qrStart)
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	valuesStateCode := o.StateCode

	joinedStateCode := swag.JoinByFormat(valuesStateCode, "multi")
	// query array param stateCode
	if err := r.SetQueryParam("stateCode", joinedStateCode...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

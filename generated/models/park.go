// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Park park
// swagger:model Park
type Park struct {

	// data
	Data []*ParkDataItems0 `json:"data"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// start
	Start int32 `json:"start,omitempty"`

	// total
	Total int32 `json:"total,omitempty"`
}

// Validate validates this park
func (m *Park) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Park) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Park) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Park) UnmarshalBinary(b []byte) error {
	var res Park
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParkDataItems0 park data items0
// swagger:model ParkDataItems0
type ParkDataItems0 struct {

	// Park addresses (physical and mailing)
	Addresses []*ParkDataItems0AddressesItems0 `json:"addresses"`

	// contacts
	Contacts *ParkDataItems0Contacts `json:"contacts,omitempty"`

	// Introductory paragraph from the park homepage
	Description string `json:"description,omitempty"`

	// Type of designation (eg, national park, national monument, national recreation area, etc)
	Designation string `json:"designation,omitempty"`

	// General overview of how to get to the park
	DirectionsInfo string `json:"directionsInfo,omitempty"`

	// Link to page, if available, that provides additional detail on getting to the park
	DirectionsURL string `json:"directionsUrl,omitempty"`

	// Fee for entering the park
	EntranceFees []*ParkDataItems0EntranceFeesItems0 `json:"entranceFees"`

	// Passes available to provide entry into the park
	EntrancePasses []*ParkDataItems0EntrancePassesItems0 `json:"entrancePasses"`

	// Full park name (with designation)
	FullName string `json:"fullName,omitempty"`

	// Park identification string
	ID string `json:"id,omitempty"`

	// Park images
	Images []*ParkDataItems0ImagesItems0 `json:"images"`

	// Park GPS cordinates
	LatLong string `json:"latLong,omitempty"`

	// Short park name (no designation)
	Name string `json:"name,omitempty"`

	// Hours and seasons when the park is open or closed
	OperatingHours []*ParkDataItems0OperatingHoursItems0 `json:"operatingHours"`

	// A variable width character code used to identify a specific park
	ParkCode string `json:"parkCode,omitempty"`

	// State(s) the park is located in (comma-delimited list)
	States string `json:"states,omitempty"`

	// Park Website
	URL string `json:"url,omitempty"`

	// General description of the weather in the park over the course of a year
	WeatherInfo string `json:"weatherInfo,omitempty"`
}

// Validate validates this park data items0
func (m *ParkDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntranceFees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntrancePasses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingHours(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkDataItems0) validateAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.Addresses); i++ {
		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParkDataItems0) validateContacts(formats strfmt.Registry) error {

	if swag.IsZero(m.Contacts) { // not required
		return nil
	}

	if m.Contacts != nil {
		if err := m.Contacts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contacts")
			}
			return err
		}
	}

	return nil
}

func (m *ParkDataItems0) validateEntranceFees(formats strfmt.Registry) error {

	if swag.IsZero(m.EntranceFees) { // not required
		return nil
	}

	for i := 0; i < len(m.EntranceFees); i++ {
		if swag.IsZero(m.EntranceFees[i]) { // not required
			continue
		}

		if m.EntranceFees[i] != nil {
			if err := m.EntranceFees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entranceFees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParkDataItems0) validateEntrancePasses(formats strfmt.Registry) error {

	if swag.IsZero(m.EntrancePasses) { // not required
		return nil
	}

	for i := 0; i < len(m.EntrancePasses); i++ {
		if swag.IsZero(m.EntrancePasses[i]) { // not required
			continue
		}

		if m.EntrancePasses[i] != nil {
			if err := m.EntrancePasses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entrancePasses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParkDataItems0) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParkDataItems0) validateOperatingHours(formats strfmt.Registry) error {

	if swag.IsZero(m.OperatingHours) { // not required
		return nil
	}

	for i := 0; i < len(m.OperatingHours); i++ {
		if swag.IsZero(m.OperatingHours[i]) { // not required
			continue
		}

		if m.OperatingHours[i] != nil {
			if err := m.OperatingHours[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("operatingHours" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParkDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkDataItems0) UnmarshalBinary(b []byte) error {
	var res ParkDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParkDataItems0AddressesItems0 park data items0 addresses items0
// swagger:model ParkDataItems0AddressesItems0
type ParkDataItems0AddressesItems0 struct {

	// city
	City string `json:"city,omitempty"`

	// line1
	Line1 string `json:"line1,omitempty"`

	// line2
	Line2 string `json:"line2,omitempty"`

	// line3
	Line3 string `json:"line3,omitempty"`

	// postal code
	PostalCode string `json:"postalCode,omitempty"`

	// state code
	StateCode string `json:"stateCode,omitempty"`

	// type
	// Enum: [Physical Mailing]
	Type string `json:"type,omitempty"`
}

// Validate validates this park data items0 addresses items0
func (m *ParkDataItems0AddressesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var parkDataItems0AddressesItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Physical","Mailing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parkDataItems0AddressesItems0TypeTypePropEnum = append(parkDataItems0AddressesItems0TypeTypePropEnum, v)
	}
}

const (

	// ParkDataItems0AddressesItems0TypePhysical captures enum value "Physical"
	ParkDataItems0AddressesItems0TypePhysical string = "Physical"

	// ParkDataItems0AddressesItems0TypeMailing captures enum value "Mailing"
	ParkDataItems0AddressesItems0TypeMailing string = "Mailing"
)

// prop value enum
func (m *ParkDataItems0AddressesItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, parkDataItems0AddressesItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParkDataItems0AddressesItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParkDataItems0AddressesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkDataItems0AddressesItems0) UnmarshalBinary(b []byte) error {
	var res ParkDataItems0AddressesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParkDataItems0Contacts Information about contacting the park
// swagger:model ParkDataItems0Contacts
type ParkDataItems0Contacts struct {

	// email addresses
	EmailAddresses []*ParkDataItems0ContactsEmailAddressesItems0 `json:"emailAddresses"`

	// phone numbers
	PhoneNumbers []*ParkDataItems0ContactsPhoneNumbersItems0 `json:"phoneNumbers"`
}

// Validate validates this park data items0 contacts
func (m *ParkDataItems0Contacts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmailAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumbers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkDataItems0Contacts) validateEmailAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.EmailAddresses); i++ {
		if swag.IsZero(m.EmailAddresses[i]) { // not required
			continue
		}

		if m.EmailAddresses[i] != nil {
			if err := m.EmailAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contacts" + "." + "emailAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParkDataItems0Contacts) validatePhoneNumbers(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumbers) { // not required
		return nil
	}

	for i := 0; i < len(m.PhoneNumbers); i++ {
		if swag.IsZero(m.PhoneNumbers[i]) { // not required
			continue
		}

		if m.PhoneNumbers[i] != nil {
			if err := m.PhoneNumbers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contacts" + "." + "phoneNumbers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParkDataItems0Contacts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkDataItems0Contacts) UnmarshalBinary(b []byte) error {
	var res ParkDataItems0Contacts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParkDataItems0ContactsEmailAddressesItems0 park data items0 contacts email addresses items0
// swagger:model ParkDataItems0ContactsEmailAddressesItems0
type ParkDataItems0ContactsEmailAddressesItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// email address
	EmailAddress string `json:"emailAddress,omitempty"`
}

// Validate validates this park data items0 contacts email addresses items0
func (m *ParkDataItems0ContactsEmailAddressesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ParkDataItems0ContactsEmailAddressesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkDataItems0ContactsEmailAddressesItems0) UnmarshalBinary(b []byte) error {
	var res ParkDataItems0ContactsEmailAddressesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParkDataItems0ContactsPhoneNumbersItems0 park data items0 contacts phone numbers items0
// swagger:model ParkDataItems0ContactsPhoneNumbersItems0
type ParkDataItems0ContactsPhoneNumbersItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// extension
	Extension string `json:"extension,omitempty"`

	// phone number
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// type
	// Enum: [Voice Fax TTY]
	Type string `json:"type,omitempty"`
}

// Validate validates this park data items0 contacts phone numbers items0
func (m *ParkDataItems0ContactsPhoneNumbersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var parkDataItems0ContactsPhoneNumbersItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Voice","Fax","TTY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parkDataItems0ContactsPhoneNumbersItems0TypeTypePropEnum = append(parkDataItems0ContactsPhoneNumbersItems0TypeTypePropEnum, v)
	}
}

const (

	// ParkDataItems0ContactsPhoneNumbersItems0TypeVoice captures enum value "Voice"
	ParkDataItems0ContactsPhoneNumbersItems0TypeVoice string = "Voice"

	// ParkDataItems0ContactsPhoneNumbersItems0TypeFax captures enum value "Fax"
	ParkDataItems0ContactsPhoneNumbersItems0TypeFax string = "Fax"

	// ParkDataItems0ContactsPhoneNumbersItems0TypeTTY captures enum value "TTY"
	ParkDataItems0ContactsPhoneNumbersItems0TypeTTY string = "TTY"
)

// prop value enum
func (m *ParkDataItems0ContactsPhoneNumbersItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, parkDataItems0ContactsPhoneNumbersItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParkDataItems0ContactsPhoneNumbersItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParkDataItems0ContactsPhoneNumbersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkDataItems0ContactsPhoneNumbersItems0) UnmarshalBinary(b []byte) error {
	var res ParkDataItems0ContactsPhoneNumbersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParkDataItems0EntranceFeesItems0 park data items0 entrance fees items0
// swagger:model ParkDataItems0EntranceFeesItems0
type ParkDataItems0EntranceFeesItems0 struct {

	// cost
	Cost float32 `json:"cost,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this park data items0 entrance fees items0
func (m *ParkDataItems0EntranceFeesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ParkDataItems0EntranceFeesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkDataItems0EntranceFeesItems0) UnmarshalBinary(b []byte) error {
	var res ParkDataItems0EntranceFeesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParkDataItems0EntrancePassesItems0 park data items0 entrance passes items0
// swagger:model ParkDataItems0EntrancePassesItems0
type ParkDataItems0EntrancePassesItems0 struct {

	// cost
	Cost float32 `json:"cost,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this park data items0 entrance passes items0
func (m *ParkDataItems0EntrancePassesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ParkDataItems0EntrancePassesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkDataItems0EntrancePassesItems0) UnmarshalBinary(b []byte) error {
	var res ParkDataItems0EntrancePassesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParkDataItems0ImagesItems0 park data items0 images items0
// swagger:model ParkDataItems0ImagesItems0
type ParkDataItems0ImagesItems0 struct {

	// alt text
	AltText string `json:"altText,omitempty"`

	// caption
	Caption string `json:"caption,omitempty"`

	// credit
	Credit string `json:"credit,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this park data items0 images items0
func (m *ParkDataItems0ImagesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ParkDataItems0ImagesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkDataItems0ImagesItems0) UnmarshalBinary(b []byte) error {
	var res ParkDataItems0ImagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParkDataItems0OperatingHoursItems0 park data items0 operating hours items0
// swagger:model ParkDataItems0OperatingHoursItems0
type ParkDataItems0OperatingHoursItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// exceptions
	Exceptions []*ParkDataItems0OperatingHoursItems0ExceptionsItems0 `json:"exceptions"`

	// name
	Name string `json:"name,omitempty"`

	// standard hours
	StandardHours *ParkDataItems0OperatingHoursItems0StandardHours `json:"standardHours,omitempty"`
}

// Validate validates this park data items0 operating hours items0
func (m *ParkDataItems0OperatingHoursItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExceptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandardHours(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkDataItems0OperatingHoursItems0) validateExceptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Exceptions) { // not required
		return nil
	}

	for i := 0; i < len(m.Exceptions); i++ {
		if swag.IsZero(m.Exceptions[i]) { // not required
			continue
		}

		if m.Exceptions[i] != nil {
			if err := m.Exceptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exceptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParkDataItems0OperatingHoursItems0) validateStandardHours(formats strfmt.Registry) error {

	if swag.IsZero(m.StandardHours) { // not required
		return nil
	}

	if m.StandardHours != nil {
		if err := m.StandardHours.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standardHours")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParkDataItems0OperatingHoursItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkDataItems0OperatingHoursItems0) UnmarshalBinary(b []byte) error {
	var res ParkDataItems0OperatingHoursItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParkDataItems0OperatingHoursItems0ExceptionsItems0 park data items0 operating hours items0 exceptions items0
// swagger:model ParkDataItems0OperatingHoursItems0ExceptionsItems0
type ParkDataItems0OperatingHoursItems0ExceptionsItems0 struct {

	// end date
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// exception hours
	ExceptionHours *ParkDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours `json:"exceptionHours,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`
}

// Validate validates this park data items0 operating hours items0 exceptions items0
func (m *ParkDataItems0OperatingHoursItems0ExceptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExceptionHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkDataItems0OperatingHoursItems0ExceptionsItems0) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ParkDataItems0OperatingHoursItems0ExceptionsItems0) validateExceptionHours(formats strfmt.Registry) error {

	if swag.IsZero(m.ExceptionHours) { // not required
		return nil
	}

	if m.ExceptionHours != nil {
		if err := m.ExceptionHours.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exceptionHours")
			}
			return err
		}
	}

	return nil
}

func (m *ParkDataItems0OperatingHoursItems0ExceptionsItems0) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParkDataItems0OperatingHoursItems0ExceptionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkDataItems0OperatingHoursItems0ExceptionsItems0) UnmarshalBinary(b []byte) error {
	var res ParkDataItems0OperatingHoursItems0ExceptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParkDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours park data items0 operating hours items0 exceptions items0 exception hours
// swagger:model ParkDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours
type ParkDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours struct {

	// friday
	Friday string `json:"friday,omitempty"`

	// monday
	Monday string `json:"monday,omitempty"`

	// saturday
	Saturday string `json:"saturday,omitempty"`

	// sunday
	Sunday string `json:"sunday,omitempty"`

	// thursday
	Thursday string `json:"thursday,omitempty"`

	// tuesday
	Tuesday string `json:"tuesday,omitempty"`

	// wednesday
	Wednesday string `json:"wednesday,omitempty"`
}

// Validate validates this park data items0 operating hours items0 exceptions items0 exception hours
func (m *ParkDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ParkDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours) UnmarshalBinary(b []byte) error {
	var res ParkDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParkDataItems0OperatingHoursItems0StandardHours park data items0 operating hours items0 standard hours
// swagger:model ParkDataItems0OperatingHoursItems0StandardHours
type ParkDataItems0OperatingHoursItems0StandardHours struct {

	// friday
	Friday string `json:"friday,omitempty"`

	// monday
	Monday string `json:"monday,omitempty"`

	// saturday
	Saturday string `json:"saturday,omitempty"`

	// sunday
	Sunday string `json:"sunday,omitempty"`

	// thursday
	Thursday string `json:"thursday,omitempty"`

	// tuesday
	Tuesday string `json:"tuesday,omitempty"`

	// wednesday
	Wednesday string `json:"wednesday,omitempty"`
}

// Validate validates this park data items0 operating hours items0 standard hours
func (m *ParkDataItems0OperatingHoursItems0StandardHours) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ParkDataItems0OperatingHoursItems0StandardHours) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkDataItems0OperatingHoursItems0StandardHours) UnmarshalBinary(b []byte) error {
	var res ParkDataItems0OperatingHoursItems0StandardHours
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Place place
// swagger:model Place
type Place struct {

	// data
	Data []*PlaceDataItems0 `json:"data"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// start
	Start int32 `json:"start,omitempty"`

	// total
	Total int32 `json:"total,omitempty"`
}

// Validate validates this place
func (m *Place) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Place) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Place) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Place) UnmarshalBinary(b []byte) error {
	var res Place
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PlaceDataItems0 place data items0
// swagger:model PlaceDataItems0
type PlaceDataItems0 struct {

	// Uniquely identifies place record
	ID string `json:"id,omitempty"`

	// Short description of the content
	ListingDescription string `json:"listingDescription,omitempty"`

	// listing image
	ListingImage *PlaceDataItems0ListingImage `json:"listingImage,omitempty"`

	// Parks that have a tie to this asset in a comma-delimited list
	RelatedParks string `json:"relatedParks,omitempty"`

	// Asset title
	Title string `json:"title,omitempty"`

	// Link to more information about the asset, if available
	URL string `json:"url,omitempty"`
}

// Validate validates this place data items0
func (m *PlaceDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateListingImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlaceDataItems0) validateListingImage(formats strfmt.Registry) error {

	if swag.IsZero(m.ListingImage) { // not required
		return nil
	}

	if m.ListingImage != nil {
		if err := m.ListingImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listingImage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlaceDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlaceDataItems0) UnmarshalBinary(b []byte) error {
	var res PlaceDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PlaceDataItems0ListingImage Small image that accompanies the short description
// swagger:model PlaceDataItems0ListingImage
type PlaceDataItems0ListingImage struct {

	// alt text
	AltText string `json:"altText,omitempty"`

	// caption
	Caption string `json:"caption,omitempty"`

	// credit
	Credit string `json:"credit,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this place data items0 listing image
func (m *PlaceDataItems0ListingImage) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PlaceDataItems0ListingImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlaceDataItems0ListingImage) UnmarshalBinary(b []byte) error {
	var res PlaceDataItems0ListingImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

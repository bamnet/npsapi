// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LessonPlan lesson plan
// swagger:model LessonPlan
type LessonPlan struct {

	// data
	Data []*LessonPlanDataItems0 `json:"data"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// start
	Start int32 `json:"start,omitempty"`

	// total
	Total int32 `json:"total,omitempty"`
}

// Validate validates this lesson plan
func (m *LessonPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LessonPlan) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LessonPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LessonPlan) UnmarshalBinary(b []byte) error {
	var res LessonPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LessonPlanDataItems0 lesson plan data items0
// swagger:model LessonPlanDataItems0
type LessonPlanDataItems0 struct {

	// common core
	CommonCore *LessonPlanDataItems0CommonCore `json:"commonCore,omitempty"`

	// Time it takes to peform the lesson
	Duration string `json:"duration,omitempty"`

	// Grade level of students at which this lesson is aimed
	GradeLevel string `json:"gradeLevel,omitempty"`

	// Unique identifier for this lesson plan
	ID int32 `json:"id,omitempty"`

	// Related parks for this lesson plan
	Parks []string `json:"parks"`

	// Objective of the lesson or the question student should be able to answer at the end of the lesson
	QuestionObjective string `json:"questionObjective,omitempty"`

	// Broad subject the lesson falls under= literacy and language arts, math, science, or social studies
	Subject string `json:"subject,omitempty"`

	// Lesson plan title
	Title string `json:"title,omitempty"`

	// Lesson plan link
	URL string `json:"url,omitempty"`
}

// Validate validates this lesson plan data items0
func (m *LessonPlanDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonCore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LessonPlanDataItems0) validateCommonCore(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonCore) { // not required
		return nil
	}

	if m.CommonCore != nil {
		if err := m.CommonCore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonCore")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LessonPlanDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LessonPlanDataItems0) UnmarshalBinary(b []byte) error {
	var res LessonPlanDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LessonPlanDataItems0CommonCore Educational standards that apply to this lesson
// swagger:model LessonPlanDataItems0CommonCore
type LessonPlanDataItems0CommonCore struct {

	// additional standards
	AdditionalStandards string `json:"additionalStandards,omitempty"`

	// ela standards
	ElaStandards []string `json:"elaStandards"`

	// math standards
	MathStandards []string `json:"mathStandards"`

	// state standards
	StateStandards string `json:"stateStandards,omitempty"`
}

// Validate validates this lesson plan data items0 common core
func (m *LessonPlanDataItems0CommonCore) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LessonPlanDataItems0CommonCore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LessonPlanDataItems0CommonCore) UnmarshalBinary(b []byte) error {
	var res LessonPlanDataItems0CommonCore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

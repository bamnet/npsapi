// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Campground campground
// swagger:model Campground
type Campground struct {

	// data
	Data []*CampgroundDataItems0 `json:"data"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// start
	Start int32 `json:"start,omitempty"`

	// total
	Total int32 `json:"total,omitempty"`
}

// Validate validates this campground
func (m *Campground) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Campground) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Campground) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Campground) UnmarshalBinary(b []byte) error {
	var res Campground
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CampgroundDataItems0 campground data items0
// swagger:model CampgroundDataItems0
type CampgroundDataItems0 struct {

	// accessibility
	Accessibility *CampgroundDataItems0Accessibility `json:"accessibility,omitempty"`

	// Campground addresses (physical and mailing)
	Addresses []*CampgroundDataItems0AddressesItems0 `json:"addresses"`

	// amenities
	Amenities *CampgroundDataItems0Amenities `json:"amenities,omitempty"`

	// campsites
	Campsites *CampgroundDataItems0Campsites `json:"campsites,omitempty"`

	// contacts
	Contacts *CampgroundDataItems0Contacts `json:"contacts,omitempty"`

	// General description of the campground
	Description string `json:"description,omitempty"`

	// General overview of how to get to the campground
	DirectionsOverview string `json:"directionsOverview,omitempty"`

	// Link to page, if available, that provides additional detail on getting to the campground
	DirectionsURL string `json:"directionsUrl,omitempty"`

	// Information about the cost of camping
	Fees []interface{} `json:"fees"`

	// Campground identification string
	ID string `json:"id,omitempty"`

	// Campground images
	Images []string `json:"images"`

	// Campground GPS cordinates
	LatLong string `json:"latLong,omitempty"`

	// Campground name
	Name string `json:"name,omitempty"`

	// Hours and seasons when the campground is open or closed
	OperatingHours []interface{} `json:"operatingHours"`

	// A variable width character code used to identify a specific park
	ParkCode string `json:"parkCode,omitempty"`

	// Information about campground regulations
	RegulationsOverview string `json:"regulationsOverview,omitempty"`

	// Link to additional information about campground regulations, if available
	RegulationsURL string `json:"regulationsUrl,omitempty"`

	// General description of the reservation process, if applicable
	ReservationsDescription string `json:"reservationsDescription,omitempty"`

	// Number of sites that are first come, first served (cannot be booked in advance)
	ReservationsSitesFirstCome string `json:"reservationsSitesFirstCome,omitempty"`

	// Number of sites that can be booked in advance
	ReservationsSitesReservable string `json:"reservationsSitesReservable,omitempty"`

	// Link to website where reservations can be made
	ReservationsURL string `json:"reservationsUrl,omitempty"`

	// General description of the weather in the campground over the course of a year
	WeatherOverview string `json:"weatherOverview,omitempty"`
}

// Validate validates this campground data items0
func (m *CampgroundDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessibility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmenities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCampsites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContacts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CampgroundDataItems0) validateAccessibility(formats strfmt.Registry) error {

	if swag.IsZero(m.Accessibility) { // not required
		return nil
	}

	if m.Accessibility != nil {
		if err := m.Accessibility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessibility")
			}
			return err
		}
	}

	return nil
}

func (m *CampgroundDataItems0) validateAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.Addresses); i++ {
		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CampgroundDataItems0) validateAmenities(formats strfmt.Registry) error {

	if swag.IsZero(m.Amenities) { // not required
		return nil
	}

	if m.Amenities != nil {
		if err := m.Amenities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amenities")
			}
			return err
		}
	}

	return nil
}

func (m *CampgroundDataItems0) validateCampsites(formats strfmt.Registry) error {

	if swag.IsZero(m.Campsites) { // not required
		return nil
	}

	if m.Campsites != nil {
		if err := m.Campsites.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("campsites")
			}
			return err
		}
	}

	return nil
}

func (m *CampgroundDataItems0) validateContacts(formats strfmt.Registry) error {

	if swag.IsZero(m.Contacts) { // not required
		return nil
	}

	if m.Contacts != nil {
		if err := m.Contacts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contacts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CampgroundDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampgroundDataItems0) UnmarshalBinary(b []byte) error {
	var res CampgroundDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CampgroundDataItems0Accessibility Detailed information about accessibility in the campground
// swagger:model CampgroundDataItems0Accessibility
type CampgroundDataItems0Accessibility struct {

	// access roads
	AccessRoads []string `json:"accessRoads"`

	// ada info
	AdaInfo string `json:"adaInfo,omitempty"`

	// additional info
	AdditionalInfo string `json:"additionalInfo,omitempty"`

	// cell phone info
	CellPhoneInfo string `json:"cellPhoneInfo,omitempty"`

	// classifications
	Classifications []string `json:"classifications"`

	// fire stove policy
	FireStovePolicy string `json:"fireStovePolicy,omitempty"`

	// internet info
	InternetInfo string `json:"internetInfo,omitempty"`

	// rv allowed
	RvAllowed bool `json:"rvAllowed,omitempty"`

	// rv info
	RvInfo string `json:"rvInfo,omitempty"`

	// rv max length
	RvMaxLength int32 `json:"rvMaxLength,omitempty"`

	// trailer allowed
	TrailerAllowed bool `json:"trailerAllowed,omitempty"`

	// trailer max length
	TrailerMaxLength int32 `json:"trailerMaxLength,omitempty"`

	// wheelchair access
	WheelchairAccess string `json:"wheelchairAccess,omitempty"`
}

// Validate validates this campground data items0 accessibility
func (m *CampgroundDataItems0Accessibility) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CampgroundDataItems0Accessibility) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampgroundDataItems0Accessibility) UnmarshalBinary(b []byte) error {
	var res CampgroundDataItems0Accessibility
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CampgroundDataItems0AddressesItems0 campground data items0 addresses items0
// swagger:model CampgroundDataItems0AddressesItems0
type CampgroundDataItems0AddressesItems0 struct {

	// city
	City string `json:"city,omitempty"`

	// line1
	Line1 string `json:"line1,omitempty"`

	// line2
	Line2 string `json:"line2,omitempty"`

	// line3
	Line3 string `json:"line3,omitempty"`

	// postal code
	PostalCode string `json:"postalCode,omitempty"`

	// state code
	StateCode string `json:"stateCode,omitempty"`

	// type
	// Enum: [Physical Mailing]
	Type string `json:"type,omitempty"`
}

// Validate validates this campground data items0 addresses items0
func (m *CampgroundDataItems0AddressesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var campgroundDataItems0AddressesItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Physical","Mailing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		campgroundDataItems0AddressesItems0TypeTypePropEnum = append(campgroundDataItems0AddressesItems0TypeTypePropEnum, v)
	}
}

const (

	// CampgroundDataItems0AddressesItems0TypePhysical captures enum value "Physical"
	CampgroundDataItems0AddressesItems0TypePhysical string = "Physical"

	// CampgroundDataItems0AddressesItems0TypeMailing captures enum value "Mailing"
	CampgroundDataItems0AddressesItems0TypeMailing string = "Mailing"
)

// prop value enum
func (m *CampgroundDataItems0AddressesItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, campgroundDataItems0AddressesItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CampgroundDataItems0AddressesItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CampgroundDataItems0AddressesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampgroundDataItems0AddressesItems0) UnmarshalBinary(b []byte) error {
	var res CampgroundDataItems0AddressesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CampgroundDataItems0Amenities Detailed information about amenities available in the campground.
// swagger:model CampgroundDataItems0Amenities
type CampgroundDataItems0Amenities struct {

	// amphitheater
	Amphitheater bool `json:"amphitheater,omitempty"`

	// ampitheater
	Ampitheater string `json:"ampitheater,omitempty"`

	// camp store
	CampStore bool `json:"campStore,omitempty"`

	// cell phone reception
	CellPhoneReception bool `json:"cellPhoneReception,omitempty"`

	// dump station
	DumpStation bool `json:"dumpStation,omitempty"`

	// firewood for sale
	FirewoodForSale bool `json:"firewoodForSale,omitempty"`

	// food storage lockers
	FoodStorageLockers string `json:"foodStorageLockers,omitempty"`

	// ice available for sale
	IceAvailableForSale bool `json:"iceAvailableForSale,omitempty"`

	// internet connectivity
	InternetConnectivity bool `json:"internetConnectivity,omitempty"`

	// laundry
	Laundry bool `json:"laundry,omitempty"`

	// potable water
	PotableWater []string `json:"potableWater"`

	// showers
	Showers []string `json:"showers"`

	// staff or volunteer host on site
	StaffOrVolunteerHostOnSite string `json:"staffOrVolunteerHostOnSite,omitempty"`

	// toilets
	Toilets []string `json:"toilets"`

	// trash recycling collection
	TrashRecyclingCollection string `json:"trashRecyclingCollection,omitempty"`
}

// Validate validates this campground data items0 amenities
func (m *CampgroundDataItems0Amenities) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CampgroundDataItems0Amenities) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampgroundDataItems0Amenities) UnmarshalBinary(b []byte) error {
	var res CampgroundDataItems0Amenities
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CampgroundDataItems0Campsites Detailed information about campsites
// swagger:model CampgroundDataItems0Campsites
type CampgroundDataItems0Campsites struct {

	// electrical hookups
	ElectricalHookups int32 `json:"electricalHookups,omitempty"`

	// group
	Group int32 `json:"group,omitempty"`

	// horse
	Horse int32 `json:"horse,omitempty"`

	// other
	Other int32 `json:"other,omitempty"`

	// rv only
	RvOnly int32 `json:"rvOnly,omitempty"`

	// tent only
	TentOnly int32 `json:"tentOnly,omitempty"`

	// total sites
	TotalSites int32 `json:"totalSites,omitempty"`

	// walk boat to
	WalkBoatTo int32 `json:"walkBoatTo,omitempty"`
}

// Validate validates this campground data items0 campsites
func (m *CampgroundDataItems0Campsites) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CampgroundDataItems0Campsites) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampgroundDataItems0Campsites) UnmarshalBinary(b []byte) error {
	var res CampgroundDataItems0Campsites
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CampgroundDataItems0Contacts Information about contacting the park regarding this campground
// swagger:model CampgroundDataItems0Contacts
type CampgroundDataItems0Contacts struct {

	// email addresses
	EmailAddresses []*CampgroundDataItems0ContactsEmailAddressesItems0 `json:"emailAddresses"`

	// phone numbers
	PhoneNumbers []*CampgroundDataItems0ContactsPhoneNumbersItems0 `json:"phoneNumbers"`
}

// Validate validates this campground data items0 contacts
func (m *CampgroundDataItems0Contacts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmailAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumbers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CampgroundDataItems0Contacts) validateEmailAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.EmailAddresses); i++ {
		if swag.IsZero(m.EmailAddresses[i]) { // not required
			continue
		}

		if m.EmailAddresses[i] != nil {
			if err := m.EmailAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contacts" + "." + "emailAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CampgroundDataItems0Contacts) validatePhoneNumbers(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumbers) { // not required
		return nil
	}

	for i := 0; i < len(m.PhoneNumbers); i++ {
		if swag.IsZero(m.PhoneNumbers[i]) { // not required
			continue
		}

		if m.PhoneNumbers[i] != nil {
			if err := m.PhoneNumbers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contacts" + "." + "phoneNumbers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CampgroundDataItems0Contacts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampgroundDataItems0Contacts) UnmarshalBinary(b []byte) error {
	var res CampgroundDataItems0Contacts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CampgroundDataItems0ContactsEmailAddressesItems0 campground data items0 contacts email addresses items0
// swagger:model CampgroundDataItems0ContactsEmailAddressesItems0
type CampgroundDataItems0ContactsEmailAddressesItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// email address
	EmailAddress string `json:"emailAddress,omitempty"`
}

// Validate validates this campground data items0 contacts email addresses items0
func (m *CampgroundDataItems0ContactsEmailAddressesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CampgroundDataItems0ContactsEmailAddressesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampgroundDataItems0ContactsEmailAddressesItems0) UnmarshalBinary(b []byte) error {
	var res CampgroundDataItems0ContactsEmailAddressesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CampgroundDataItems0ContactsPhoneNumbersItems0 campground data items0 contacts phone numbers items0
// swagger:model CampgroundDataItems0ContactsPhoneNumbersItems0
type CampgroundDataItems0ContactsPhoneNumbersItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// extension
	Extension string `json:"extension,omitempty"`

	// phone number
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// type
	// Enum: [Voice Fax TTY]
	Type string `json:"type,omitempty"`
}

// Validate validates this campground data items0 contacts phone numbers items0
func (m *CampgroundDataItems0ContactsPhoneNumbersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var campgroundDataItems0ContactsPhoneNumbersItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Voice","Fax","TTY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		campgroundDataItems0ContactsPhoneNumbersItems0TypeTypePropEnum = append(campgroundDataItems0ContactsPhoneNumbersItems0TypeTypePropEnum, v)
	}
}

const (

	// CampgroundDataItems0ContactsPhoneNumbersItems0TypeVoice captures enum value "Voice"
	CampgroundDataItems0ContactsPhoneNumbersItems0TypeVoice string = "Voice"

	// CampgroundDataItems0ContactsPhoneNumbersItems0TypeFax captures enum value "Fax"
	CampgroundDataItems0ContactsPhoneNumbersItems0TypeFax string = "Fax"

	// CampgroundDataItems0ContactsPhoneNumbersItems0TypeTTY captures enum value "TTY"
	CampgroundDataItems0ContactsPhoneNumbersItems0TypeTTY string = "TTY"
)

// prop value enum
func (m *CampgroundDataItems0ContactsPhoneNumbersItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, campgroundDataItems0ContactsPhoneNumbersItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CampgroundDataItems0ContactsPhoneNumbersItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CampgroundDataItems0ContactsPhoneNumbersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampgroundDataItems0ContactsPhoneNumbersItems0) UnmarshalBinary(b []byte) error {
	var res CampgroundDataItems0ContactsPhoneNumbersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

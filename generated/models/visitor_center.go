// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VisitorCenter visitor center
// swagger:model VisitorCenter
type VisitorCenter struct {

	// data
	Data []*VisitorCenterDataItems0 `json:"data"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// start
	Start int32 `json:"start,omitempty"`

	// total
	Total int32 `json:"total,omitempty"`
}

// Validate validates this visitor center
func (m *VisitorCenter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VisitorCenter) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VisitorCenter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VisitorCenter) UnmarshalBinary(b []byte) error {
	var res VisitorCenter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VisitorCenterDataItems0 visitor center data items0
// swagger:model VisitorCenterDataItems0
type VisitorCenterDataItems0 struct {

	// Visitor Center addresses (physical and mailing)
	Addresses []*VisitorCenterDataItems0AddressesItems0 `json:"addresses"`

	// Information about contacting staff at the facility
	Contacts []interface{} `json:"contacts"`

	// General description of the facility
	Description string `json:"description,omitempty"`

	// General overview of how to get to the facility
	DirectionsInfo string `json:"directionsInfo,omitempty"`

	// Link to page, if available, that provides additional detail on getting to the facility
	DirectionsURL string `json:"directionsUrl,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// Facility latitude and longitude
	LatLong string `json:"latLong,omitempty"`

	// Facility name
	Name string `json:"name,omitempty"`

	// Hours and seasons when the facility is open or closed
	OperatingHours []*VisitorCenterDataItems0OperatingHoursItems0 `json:"operatingHours"`

	// A variable width character code used to identify a specific park
	ParkCode string `json:"parkCode,omitempty"`

	// The URL corresponding to the visitor center
	URL string `json:"url,omitempty"`
}

// Validate validates this visitor center data items0
func (m *VisitorCenterDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingHours(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VisitorCenterDataItems0) validateAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.Addresses); i++ {
		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VisitorCenterDataItems0) validateContacts(formats strfmt.Registry) error {

	if swag.IsZero(m.Contacts) { // not required
		return nil
	}

	return nil
}

func (m *VisitorCenterDataItems0) validateOperatingHours(formats strfmt.Registry) error {

	if swag.IsZero(m.OperatingHours) { // not required
		return nil
	}

	for i := 0; i < len(m.OperatingHours); i++ {
		if swag.IsZero(m.OperatingHours[i]) { // not required
			continue
		}

		if m.OperatingHours[i] != nil {
			if err := m.OperatingHours[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("operatingHours" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VisitorCenterDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VisitorCenterDataItems0) UnmarshalBinary(b []byte) error {
	var res VisitorCenterDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VisitorCenterDataItems0AddressesItems0 visitor center data items0 addresses items0
// swagger:model VisitorCenterDataItems0AddressesItems0
type VisitorCenterDataItems0AddressesItems0 struct {

	// city
	City string `json:"city,omitempty"`

	// line1
	Line1 string `json:"line1,omitempty"`

	// line2
	Line2 string `json:"line2,omitempty"`

	// line3
	Line3 string `json:"line3,omitempty"`

	// postal code
	PostalCode string `json:"postalCode,omitempty"`

	// state code
	StateCode string `json:"stateCode,omitempty"`

	// type
	// Enum: [Physical Mailing]
	Type string `json:"type,omitempty"`
}

// Validate validates this visitor center data items0 addresses items0
func (m *VisitorCenterDataItems0AddressesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var visitorCenterDataItems0AddressesItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Physical","Mailing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		visitorCenterDataItems0AddressesItems0TypeTypePropEnum = append(visitorCenterDataItems0AddressesItems0TypeTypePropEnum, v)
	}
}

const (

	// VisitorCenterDataItems0AddressesItems0TypePhysical captures enum value "Physical"
	VisitorCenterDataItems0AddressesItems0TypePhysical string = "Physical"

	// VisitorCenterDataItems0AddressesItems0TypeMailing captures enum value "Mailing"
	VisitorCenterDataItems0AddressesItems0TypeMailing string = "Mailing"
)

// prop value enum
func (m *VisitorCenterDataItems0AddressesItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, visitorCenterDataItems0AddressesItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VisitorCenterDataItems0AddressesItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VisitorCenterDataItems0AddressesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VisitorCenterDataItems0AddressesItems0) UnmarshalBinary(b []byte) error {
	var res VisitorCenterDataItems0AddressesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VisitorCenterDataItems0EmailAddressesItems0 visitor center data items0 email addresses items0
// swagger:model VisitorCenterDataItems0EmailAddressesItems0
type VisitorCenterDataItems0EmailAddressesItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// email address
	EmailAddress string `json:"emailAddress,omitempty"`
}

// Validate validates this visitor center data items0 email addresses items0
func (m *VisitorCenterDataItems0EmailAddressesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VisitorCenterDataItems0EmailAddressesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VisitorCenterDataItems0EmailAddressesItems0) UnmarshalBinary(b []byte) error {
	var res VisitorCenterDataItems0EmailAddressesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VisitorCenterDataItems0OperatingHoursItems0 visitor center data items0 operating hours items0
// swagger:model VisitorCenterDataItems0OperatingHoursItems0
type VisitorCenterDataItems0OperatingHoursItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// exceptions
	Exceptions []*VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0 `json:"exceptions"`

	// name
	Name string `json:"name,omitempty"`

	// standard hours
	StandardHours *VisitorCenterDataItems0OperatingHoursItems0StandardHours `json:"standardHours,omitempty"`
}

// Validate validates this visitor center data items0 operating hours items0
func (m *VisitorCenterDataItems0OperatingHoursItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExceptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandardHours(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VisitorCenterDataItems0OperatingHoursItems0) validateExceptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Exceptions) { // not required
		return nil
	}

	for i := 0; i < len(m.Exceptions); i++ {
		if swag.IsZero(m.Exceptions[i]) { // not required
			continue
		}

		if m.Exceptions[i] != nil {
			if err := m.Exceptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exceptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VisitorCenterDataItems0OperatingHoursItems0) validateStandardHours(formats strfmt.Registry) error {

	if swag.IsZero(m.StandardHours) { // not required
		return nil
	}

	if m.StandardHours != nil {
		if err := m.StandardHours.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standardHours")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VisitorCenterDataItems0OperatingHoursItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VisitorCenterDataItems0OperatingHoursItems0) UnmarshalBinary(b []byte) error {
	var res VisitorCenterDataItems0OperatingHoursItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0 visitor center data items0 operating hours items0 exceptions items0
// swagger:model VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0
type VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0 struct {

	// end date
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// exception hours
	ExceptionHours *VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours `json:"exceptionHours,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`
}

// Validate validates this visitor center data items0 operating hours items0 exceptions items0
func (m *VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExceptionHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0) validateExceptionHours(formats strfmt.Registry) error {

	if swag.IsZero(m.ExceptionHours) { // not required
		return nil
	}

	if m.ExceptionHours != nil {
		if err := m.ExceptionHours.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exceptionHours")
			}
			return err
		}
	}

	return nil
}

func (m *VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0) UnmarshalBinary(b []byte) error {
	var res VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours visitor center data items0 operating hours items0 exceptions items0 exception hours
// swagger:model VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours
type VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours struct {

	// friday
	Friday string `json:"friday,omitempty"`

	// monday
	Monday string `json:"monday,omitempty"`

	// saturday
	Saturday string `json:"saturday,omitempty"`

	// sunday
	Sunday string `json:"sunday,omitempty"`

	// thursday
	Thursday string `json:"thursday,omitempty"`

	// tuesday
	Tuesday string `json:"tuesday,omitempty"`

	// wednesday
	Wednesday string `json:"wednesday,omitempty"`
}

// Validate validates this visitor center data items0 operating hours items0 exceptions items0 exception hours
func (m *VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours) UnmarshalBinary(b []byte) error {
	var res VisitorCenterDataItems0OperatingHoursItems0ExceptionsItems0ExceptionHours
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VisitorCenterDataItems0OperatingHoursItems0StandardHours visitor center data items0 operating hours items0 standard hours
// swagger:model VisitorCenterDataItems0OperatingHoursItems0StandardHours
type VisitorCenterDataItems0OperatingHoursItems0StandardHours struct {

	// friday
	Friday string `json:"friday,omitempty"`

	// monday
	Monday string `json:"monday,omitempty"`

	// saturday
	Saturday string `json:"saturday,omitempty"`

	// sunday
	Sunday string `json:"sunday,omitempty"`

	// thursday
	Thursday string `json:"thursday,omitempty"`

	// tuesday
	Tuesday string `json:"tuesday,omitempty"`

	// wednesday
	Wednesday string `json:"wednesday,omitempty"`
}

// Validate validates this visitor center data items0 operating hours items0 standard hours
func (m *VisitorCenterDataItems0OperatingHoursItems0StandardHours) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VisitorCenterDataItems0OperatingHoursItems0StandardHours) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VisitorCenterDataItems0OperatingHoursItems0StandardHours) UnmarshalBinary(b []byte) error {
	var res VisitorCenterDataItems0OperatingHoursItems0StandardHours
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VisitorCenterDataItems0PhoneNumbersItems0 visitor center data items0 phone numbers items0
// swagger:model VisitorCenterDataItems0PhoneNumbersItems0
type VisitorCenterDataItems0PhoneNumbersItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// extension
	Extension string `json:"extension,omitempty"`

	// phone number
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// type
	// Enum: [Voice Fax TTY]
	Type string `json:"type,omitempty"`
}

// Validate validates this visitor center data items0 phone numbers items0
func (m *VisitorCenterDataItems0PhoneNumbersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var visitorCenterDataItems0PhoneNumbersItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Voice","Fax","TTY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		visitorCenterDataItems0PhoneNumbersItems0TypeTypePropEnum = append(visitorCenterDataItems0PhoneNumbersItems0TypeTypePropEnum, v)
	}
}

const (

	// VisitorCenterDataItems0PhoneNumbersItems0TypeVoice captures enum value "Voice"
	VisitorCenterDataItems0PhoneNumbersItems0TypeVoice string = "Voice"

	// VisitorCenterDataItems0PhoneNumbersItems0TypeFax captures enum value "Fax"
	VisitorCenterDataItems0PhoneNumbersItems0TypeFax string = "Fax"

	// VisitorCenterDataItems0PhoneNumbersItems0TypeTTY captures enum value "TTY"
	VisitorCenterDataItems0PhoneNumbersItems0TypeTTY string = "TTY"
)

// prop value enum
func (m *VisitorCenterDataItems0PhoneNumbersItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, visitorCenterDataItems0PhoneNumbersItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VisitorCenterDataItems0PhoneNumbersItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VisitorCenterDataItems0PhoneNumbersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VisitorCenterDataItems0PhoneNumbersItems0) UnmarshalBinary(b []byte) error {
	var res VisitorCenterDataItems0PhoneNumbersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

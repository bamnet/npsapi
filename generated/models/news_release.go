// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewsRelease news release
// swagger:model NewsRelease
type NewsRelease struct {

	// data
	Data []*NewsReleaseDataItems0 `json:"data"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// start
	Start int32 `json:"start,omitempty"`

	// total
	Total int32 `json:"total,omitempty"`
}

// Validate validates this news release
func (m *NewsRelease) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewsRelease) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewsRelease) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewsRelease) UnmarshalBinary(b []byte) error {
	var res NewsRelease
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NewsReleaseDataItems0 news release data items0
// swagger:model NewsReleaseDataItems0
type NewsReleaseDataItems0 struct {

	// Short description of news release content
	Abstract string `json:"abstract,omitempty"`

	// Unique identifier for the news release
	ID string `json:"id,omitempty"`

	// image
	Image *NewsReleaseDataItems0Image `json:"image,omitempty"`

	// A variable width character code that uniquely identifies a specific park
	ParkCode string `json:"parkCode,omitempty"`

	// Date news release was released
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// News release title
	Title string `json:"title,omitempty"`

	// Link to full news release
	URL string `json:"url,omitempty"`
}

// Validate validates this news release data items0
func (m *NewsReleaseDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewsReleaseDataItems0) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *NewsReleaseDataItems0) validateReleaseDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("releaseDate", "body", "date-time", m.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewsReleaseDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewsReleaseDataItems0) UnmarshalBinary(b []byte) error {
	var res NewsReleaseDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NewsReleaseDataItems0Image News release image
// swagger:model NewsReleaseDataItems0Image
type NewsReleaseDataItems0Image struct {

	// alt text
	AltText string `json:"altText,omitempty"`

	// caption
	Caption string `json:"caption,omitempty"`

	// credit
	Credit string `json:"credit,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this news release data items0 image
func (m *NewsReleaseDataItems0Image) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewsReleaseDataItems0Image) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewsReleaseDataItems0Image) UnmarshalBinary(b []byte) error {
	var res NewsReleaseDataItems0Image
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
